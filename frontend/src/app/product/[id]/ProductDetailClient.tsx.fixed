"use client";
import React, { useRef } from "react";
import ProductHero from "./ProductHero";
import KeyFeatures from "./KeyFeatures";
import FeatureDetails, { FeatureDetail } from "./FeatureDetails";
import FAQSection, { FAQItem } from "./FAQSection";
import ProductPurchaseOptions, { ProductVariant, ProductSpecOption } from "./ProductPurchaseOptions";
import GoodProductsSection from "./GoodProductsSection";
import BrandSection from "./BrandSection";
import { FaBolt, FaTint, FaBatteryFull, FaRegLightbulb } from "react-icons/fa";
import { useCart } from '@/CartContext';
import { Product as ApiProduct, getProductById } from '@/services/api';

// 前端顯示用的產品類型
interface Product {
  id: string;
  name: string;
  price: number;
  description: string;
  cover: string;
  category: string;
  style?: string;
  media: {
    type: "image" | "video";
    src: string;
    alt?: string;
  }[];
  brandId?: string;
  brand?: {
    id: string;
    name: string;
    description: string;
    logoUrl: string;
  };
}

interface ProductDetailClientProps {
  id: string;
}

const ProductDetailClient: React.FC<ProductDetailClientProps> = ({ id }) => {
  // KeyFeatures 橫向滾動區塊的 scrollRef
  const keyFeaturesScrollRef = useRef<HTMLDivElement>(null);

  const [product, setProduct] = React.useState<Product | null>(null);
  const [collected, setCollected] = React.useState(false);
  const { cartItems, addToCart, removeFromCart, addCartClick } = useCart();

  // 生命週期，localStorage與資料讀取
  React.useEffect(() => {
    // 讀取產品資料
    const loadProductData = async () => {
      try {
        // 從實際 API 獲取資料
        const apiProduct = await getProductById(id);
        
        // 轉換為前端顯示格式
        const displayProduct: Product = {
          id: apiProduct.id,
          name: apiProduct.name,
          price: apiProduct.price,
          description: apiProduct.description,
          cover: apiProduct.imageUrl, // 使用主圖作為封面
          category: apiProduct.category,
          // 將所有圖轉換為媒體列表
          media: [
            {
              type: "image",
              src: apiProduct.imageUrl,
              alt: apiProduct.name
            },
            ...(apiProduct.images || []).map(img => ({
              type: "image" as const,
              src: img,
              alt: apiProduct.name
            }))
          ],
          // 添加品牌資訊
          brandId: apiProduct.brandId,
          brand: apiProduct.brand ? {
            id: apiProduct.brand.id,
            name: apiProduct.brand.name,
            description: apiProduct.brand.description,
            logoUrl: apiProduct.brand.logoUrl
          } : undefined
        };
        
        setProduct(displayProduct);
      } catch (error) {
        console.error('無法載入產品資料:', error);
        // 如果 API 失敗，嘗試使用模擬資料
        fetch(`/api/mock-product/${id}`)
          .then((res) => res.json())
          .then((data: Product) => setProduct(data))
          .catch(err => console.error('無法載入模擬產品資料:', err));
      }
    };
    
    loadProductData();
    
    // 讀取本地狀態
    setCollected(localStorage.getItem(`collected_${id}`) === '1');
  }, [id]);

  // 收藏功能
  const handleCollect = () => {
    const newState = !collected;
    setCollected(newState);
    localStorage.setItem(`collected_${id}`, newState ? '1' : '0');
  };

  // 處理加入購物車
  const handleCart = () => {
    if (!product) return;
    
    const isInCart = cartItems.some(item => item.id === id);
    
    if (isInCart) {
      removeFromCart(id);
    } else {
      const item = {
        id: product.id,
        name: product.name,
        price: product.price,
        image: product.cover,
        quantity: 1
      };
      addToCart(item);
      addCartClick();
    }
  };

  if (!product) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-gray-900"></div>
      </div>
    );
  }

  // 產品特性詳細資訊
  const featureDetails: FeatureDetail[] = [
    {
      icon: <FaBolt className="text-yellow-500 text-3xl" />,
      title: "高效能",
      description: "最新技術帶來無與倫比的使用體驗，能效提升40%",
      animation: "fade-right"
    },
    {
      icon: <FaTint className="text-blue-500 text-3xl" />,
      title: "防水設計",
      description: "IP68防水等級，水深1.5公尺可持續30分鐘不受損",
      animation: "fade-left"
    },
    {
      icon: <FaBatteryFull className="text-green-500 text-3xl" />,
      title: "長效電池",
      description: "單次充電可持續使用長達36小時，遠超同類產品",
      animation: "fade-right"
    },
    {
      icon: <FaRegLightbulb className="text-amber-500 text-3xl" />,
      title: "智能感應",
      description: "內置先進感測器，根據環境自動調整最佳運作模式",
      animation: "fade-left"
    }
  ];

  // 常見問題
  const faqs: FAQItem[] = [
    {
      question: "產品保固期是多久？",
      answer: "我們提供兩年的全球保固服務，若產品出現功能性問題可免費維修或更換。"
    },
    {
      question: "如何正確清潔和保養產品？",
      answer: "建議使用微濕的軟布輕輕擦拭，避免使用含酒精或腐蝕性的清潔劑，定期清潔可延長產品壽命。"
    },
    {
      question: "產品支援哪些配件？",
      answer: "我們提供多種專用配件，包括保護套、專用充電器及連接線，全部通過嚴格品質測試，完美兼容。"
    },
    {
      question: "如何聯絡客服支援？",
      answer: "您可透過官網的線上客服、客服電子郵件或撥打服務熱線獲得協助，我們的專業團隊會盡快回應您的問題。"
    }
  ];

  // 商品變體
  const variants: ProductVariant[] = [
    { 
      id: "color-black",
      name: "經典黑",
      type: "color",
      hexCode: "#000000",
      extra: 0
    },
    { 
      id: "color-white",
      name: "純淨白",
      type: "color",
      hexCode: "#FFFFFF",
      extra: 0
    },
    { 
      id: "color-green",
      name: "自然綠",
      type: "color",
      hexCode: "#4CAF50",
      extra: 0
    }
  ];

  // 規格選項
  const specOptions: ProductSpecOption[] = [
    { id: "standard", name: "標準版", extra: 0, description: "基本功能完整，適合一般用戶" },
    { id: "premium", name: "高級版", extra: 500, description: "附加進階功能，提供更好的使用體驗" },
    { id: "pro", name: "專業版", extra: 1200, description: "包含所有功能和專業支援服務" }
  ];

  // 格式化價格
  const formatPrice = (price: number) => {
    return `$${price.toLocaleString()}`;
  };

  const isInCart = cartItems.some(item => item.id === id);

  return (
    <div className="min-h-screen bg-white">
      <ProductHero
        product={product}
        isCollected={collected}
        onCollect={handleCollect}
        isInCart={isInCart}
        onCart={handleCart}
      />
      
      <KeyFeatures
        scrollRef={keyFeaturesScrollRef}
        features={product?.keyFeatures || []}
      />
      
      <FeatureDetails features={featureDetails} />
      
      <ProductPurchaseOptions
        price={product.price}
        formatPrice={formatPrice}
        variants={variants}
        specOptions={specOptions}
        isInCart={isInCart}
        onAddToCart={handleCart}
      />

      {product.brand && 
        <BrandSection brand={product.brand} />
      }
      
      <FAQSection faqs={faqs} />
      
      <GoodProductsSection currentProductId={id} />
    </div>
  );
};

export default ProductDetailClient;
