// API 服務，封裝與後端的通信邏輯
import axios from 'axios';

// 建立 Axios 實例
const api = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3003',
  headers: {
    'Content-Type': 'application/json',
  },
  withCredentials: true, // 允許跨域請求攜帶 cookie
  timeout: 10000, // 請求超時時間
});

// 添加請求攜帶與響應攔截
// 請求攔截
api.interceptors.request.use(
  (config) => {
    console.log('發送請求:', config.url, config.params);
    return config;
  },
  (error) => {
    console.error('請求錯誤:', error);
    return Promise.reject(error);
  }
);

// 響應攔截
api.interceptors.response.use(
  (response) => {
    console.log('接收響應:', response.status, response.data);
    return response;
  },
  (error) => {
    console.error('響應錯誤:', error);
    return Promise.reject(error);
  }
);

// 後端 API 的基本 URL
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3003';

/**
 * 品牌介面，與後端 Brand 實體對應
 */
export interface Brand {
  id: string;
  name: string;
  description: string;
  logoUrl: string;
  isActive: boolean;
  createdAt?: string;
  updatedAt?: string;
}

/**
 * 關鍵特性介面，與後端 KeyFeature 對應
 */
export interface KeyFeature {
  image: string;
  title: string;
  subtitle?: string;
  description: string;
}

/**
 * 產品介面，與後端 Product 實體對應
 */
export interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  stock: number;
  category: string;
  imageUrl: string;
  images: string[];
  isActive: boolean;
  brandId?: string;
  brand?: Brand;
  keyFeatures?: KeyFeature[];
  createdAt?: string;
  updatedAt?: string;
}

/**
 * 分頁結果介面
 */
export interface PagedResult<T> {
  items: T[];
  total: number;
}

/**
 * 查詢參數介面
 */
export interface ProductQueryParams {
  skip?: number;
  take?: number;
  sortBy?: string;
  order?: 'ASC' | 'DESC';
  category?: string;
  minPrice?: number;
  maxPrice?: number;
  search?: string;
}

/**
 * 獲取產品列表
 * @param params 查詢參數
 */
export const getProducts = async (params: ProductQueryParams = {}): Promise<PagedResult<Product>> => {
  try {
    const response = await api.get('/products', { params });
    return response.data;
  } catch (error) {
    console.error('獲取產品列表失敗:', error);
    
    // 出錯時使用模擬資料
    console.warn('使用模擬產品資料');
    const mockResponse = await fetch('/api/mock-product/list');
    const mockData = await mockResponse.json();
    
    return {
      items: mockData.products,
      total: mockData.products.length
    };
  }
};

/**
 * 獲取單個產品詳情
 * @param id 產品ID
 */
export const getProductById = async (id: string): Promise<Product> => {
  try {
    const response = await api.get(`/products/${id}`);
    return response.data;
  } catch (error) {
    console.error(`獲取產品 ${id} 詳情失敗:`, error);
    
    // 出錯時嘗試從模擬資料獲取
    console.warn('使用模擬產品資料');
    const mockResponse = await fetch(`/api/mock-product/${id}`);
    const mockData = await mockResponse.json();
    
    return mockData;
  }
};

/**
 * 建立新產品
 * @param product 產品資料
 */
export const createProduct = async (product: Omit<Product, 'id'>): Promise<Product> => {
  const response = await api.post('/products', product);
  return response.data;
};

/**
 * 更新產品
 * @param id 產品ID
 * @param product 要更新的產品資料
 */
export const updateProduct = async (id: string, product: Partial<Product>): Promise<Product> => {
  const response = await api.patch(`/products/${id}`, product);
  return response.data;
};

/**
 * 刪除產品
 * @param id 要刪除的產品ID
 */
export const deleteProduct = async (id: string): Promise<void> => {
  await api.delete(`/products/${id}`);
};

/**
 * 獲取品牌列表
 */
export const getBrands = async (): Promise<Brand[]> => {
  const response = await api.get('/brands');
  return response.data;
};

/**
 * 獲取單個品牌詳情
 * @param id 品牌ID
 */
export const getBrandById = async (id: string): Promise<Brand> => {
  const response = await api.get(`/brands/${id}`);
  return response.data;
};
